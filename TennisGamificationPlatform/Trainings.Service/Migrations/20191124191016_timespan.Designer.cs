// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Trainings.Service.Repositories;

namespace Trainings.Service.Migrations
{
    [DbContext(typeof(TrainingsDbContext))]
    [Migration("20191124191016_timespan")]
    partial class timespan
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Trainings.Service.Domain.Attendance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("Trainings.Service.Domain.Coach", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdentityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Coaches");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f9469660-3c22-4109-910e-982f59f8ba0d"),
                            IdentityId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Test",
                            Surname = "Coach"
                        });
                });

            modelBuilder.Entity("Trainings.Service.Domain.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Trainings.Service.Domain.PlayerAttendance", b =>
                {
                    b.Property<Guid>("AttendanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AttendanceId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerAttendance");
                });

            modelBuilder.Entity("Trainings.Service.Domain.PlayerTrainingGroup", b =>
                {
                    b.Property<Guid>("TrainingGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TrainingGroupId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerTrainingGroup");
                });

            modelBuilder.Entity("Trainings.Service.Domain.TrainingGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CoachId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrentOptionalChallenge")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Hour")
                        .HasColumnType("time");

                    b.Property<string>("LevelName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.ToTable("TrainingGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("db9444e6-3334-4e29-9676-03f8a0c10f91"),
                            CurrentOptionalChallenge = new Guid("00000000-0000-0000-0000-000000000000"),
                            Day = 3,
                            Hour = new TimeSpan(0, 18, 0, 0, 0),
                            LevelName = "Red",
                            Name = "Wednesday 18:00"
                        });
                });

            modelBuilder.Entity("Trainings.Service.Domain.Attendance", b =>
                {
                    b.HasOne("Trainings.Service.Domain.TrainingGroup", "Group")
                        .WithMany("Attendances")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Trainings.Service.Domain.PlayerAttendance", b =>
                {
                    b.HasOne("Trainings.Service.Domain.Attendance", "Attendance")
                        .WithMany("AttendantPlayers")
                        .HasForeignKey("AttendanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trainings.Service.Domain.Player", "Player")
                        .WithMany("PlayerAttendances")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Trainings.Service.Domain.PlayerTrainingGroup", b =>
                {
                    b.HasOne("Trainings.Service.Domain.Player", "Player")
                        .WithMany("PlayerTrainingGroups")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trainings.Service.Domain.TrainingGroup", "TrainingGroup")
                        .WithMany("PlayerTrainingGroups")
                        .HasForeignKey("TrainingGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Trainings.Service.Domain.TrainingGroup", b =>
                {
                    b.HasOne("Trainings.Service.Domain.Coach", "Coach")
                        .WithMany("Groups")
                        .HasForeignKey("CoachId");
                });
#pragma warning restore 612, 618
        }
    }
}
